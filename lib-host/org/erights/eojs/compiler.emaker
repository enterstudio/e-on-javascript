# Copyright 2008 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")
pragma.enable("accumulator")

def makeCallExpr := <elang:evm.makeCallExpr>
def makeSlotExpr := <elang:evm.makeSlotExpr>
def FinalPattern := <elang:evm.makeFinalPattern>.asType()
def VarPattern := <type:org.erights.e.elang.evm.VarPattern> # import won't ???
def SlotPattern := <elang:evm.makeSlotPattern>.asType()
def IgnorePattern := <elang:evm.makeIgnorePattern>.asType()

def map {
  to v(f, coll) {
    return accum [] for v in coll {_.with(f(v))}}
  to kv(f, coll) {
    return accum [] for k => v in coll {_.with(f(k, v))}}
}
def map2(f, coll) {
  var az := []
  var bs := []
  for v in coll {
    def [a, b] := f(v)
    az with= a
    bs with= b
  }
  return [az, bs]
}

def STATEMENT {}
def EXPR {}

interface SV guards SVStamp {}
def makeSV(kind, text, temps) {
  if (false) {
    var par := 0
    for c in text {
      switch (c) {
        match =='(' { par += 1 }
        match ==')' { par -= 1 }
        match _ {}
      }
    }
    if (par != 0) {
      throw(`Mismatched parens in $text`)
    }
  }
  return def sv implements SVStamp {
    to requireExpr(ej) { require(kind == EXPR, fn {throw.eject(ej, `$text is not an expression`)})}
    to withTemp(t :String) { return makeSV(kind, text, temps.with(t)) }
    to out(ts) { ts.addAll(temps); return text }
    to outz() { return text }
  }
}

def Expr {
  to coerce(specimen, ej) {
    def sv := SV.coerce(specimen, ej)
    sv.requireExpr(ej)
    return sv
  }
}

var i := 0

def unsv(sv) {
  def tc := [].asSet().diverge()
  def text := sv.out(tc)
  def temps := if (tc.size().aboveZero()) {
    `var ${", ".rjoin(tc.getElements())};$\n`
  } else { "" }
  return `$temps$text`
}

def jsKit {
  to fresh() {
      return makeSV(EXPR, def t := `e_t${i += 1}`, [].asSet())
    }
  to temp() {
    #if (i == 39) {throw("break") }
    return [makeSV(EXPR, def t := `e_t${i += 1}`, [t].asSet()),
            fn expr { expr.requireExpr(null); def tc := [t].asSet().diverge(); makeSV(EXPR, `($t = ${expr.out(tc)})`, tc.snapshot()) }]
  }
  to literal(v) {
    return switch (v) {
      match s :String { 
        def quoted := `'${v.replaceAll("\\", "\\\\").replaceAll("'", "\\'")}'`
        # for compatibility with JS-in-HTML
        makeSV(EXPR, if (quoted.indexOf("</") != -1) {
          `(${quoted.replaceAll("</", "<'+'/")})`
        } else {
          quoted
        }, [].asSet())
      }
      match c :char   { jsKit.new(jsKit.nativeVar("e_Character"), [jsKit.literal(E.toString(v))]) }
      match n :int     { makeSV(EXPR, `($n)`, [].asSet()) }
      match n :float64 { makeSV(EXPR, `($n)`, [].asSet()) }
    }
  }
  to call(targ :Expr, prop :String, args :List[Expr]) {
    return jsKit.callf(jsKit.prop(targ, prop), args)
  }
  to callf(targ :Expr, args :List[Expr]) {
    def tc := [].asSet().diverge()
    return makeSV(EXPR, `${targ.out(tc)}(${", ".rjoin(map.v(fn a { a.out(tc) }, args))})`, tc)
  }
  to new(targ :Expr, args :List[Expr]) {
    def tc := [].asSet().diverge()
    return makeSV(EXPR, `new ${targ.out(tc)}(${", ".rjoin(map.v(fn a { a.out(tc) }, args))})`, tc)
  }
  to prop(targ :Expr, prop :String) { # XXX check prop
    def tc := [].asSet().diverge()
    return makeSV(EXPR, `${targ.out(tc)}.$prop`, tc)
  }
  to subscript(coll :Expr, key :Expr) {
    def tc := [].asSet().diverge()
    return makeSV(EXPR, `${coll.out(tc)}[${key.out(tc)}]`, tc)
  }
  to func(params, body :SV) {
    def tc := [].asSet().diverge()
    
    def [tw, sb] := <elib:oldeio.makeTextWriter>.makeBufferingPair()
    tw.print("(function (")
    tw.print(", ".rjoin(map.v(fn a { a.out(tc) }, params)))
    tw.print(") {")
    tw.indent().lnPrint(unsv(body))
    tw.lnPrint("})")
    
    return makeSV(EXPR, sb.snapshot(), tc)
  }
  to "if"(test :Expr, then :SV, els :SV) {
    def tc := [].asSet().diverge()
    
    def [tw, sb] := <elib:oldeio.makeTextWriter>.makeBufferingPair()
    tw.print("if (")
    tw.indent().println()
    tw.indent().print(test.out(tc))
    tw.lnPrint(") {")
    tw.indent().println()
    tw.indent().lnPrint(then.out(tc))
    tw.lnPrint("} else {")
    tw.indent().println()
    tw.indent().lnPrint(els.out(tc))
    tw.lnPrint("}")
    
    return makeSV(STATEMENT, sb.snapshot(), tc)
  }
  to "tryCatch"(body :SV, exVar :Expr, catchBody :SV) { # XXX Expr should be Var
    def tc := [].asSet().diverge()
    
    def [tw, sb] := <elib:oldeio.makeTextWriter>.makeBufferingPair()
    tw.print("try {")
    tw.indent().println()
    tw.indent().print(body.out(tc))
    tw.println()
    tw.print("} catch (", exVar.outz(), ") {")
    tw.indent().println()
    tw.indent().lnPrint(catchBody.out(tc))
    tw.lnPrint("}")
    
    return makeSV(STATEMENT, sb.snapshot(), tc)
  }
  to scope(body :SV) {
    def tc := [].asSet().diverge()
    
    def [tw, sb] := <elib:oldeio.makeTextWriter>.makeBufferingPair()
    tw.print("(function () {")
    tw.indent().lnPrint(body.out(tc))
    tw.lnPrint("})()")
    
    return makeSV(EXPR, sb.snapshot(), tc)
  }
  to seq(subs :List[SV]) {
    def tc := [].asSet().diverge()
    return makeSV(STATEMENT, ";\n".rjoin(map.v(fn a { a.out(tc) }, subs)), tc)
  }
  to eseq(subs :List[Expr]) {
    # XXX make SVs discriminate on statements vs expr and combine with seq?
    def tc := [].asSet().diverge()
    return makeSV(EXPR, `(${", ".rjoin(map.v(fn a { a.out(tc) }, subs))})`, tc)
  }
  to nativeVar(name :String) { return makeSV(EXPR, name, [].asSet()) } # XXX check syntax
  to assign(lv :String, rv :Expr) { # XXX check lvalue syntax
    def tc := [].asSet().diverge()
    return makeSV(EXPR, `($lv = ${rv.out(tc)})`, tc)
  }
  to "return"(result :Expr) {
    def tc := [].asSet().diverge()
    return makeSV(STATEMENT, `return ${result.out(tc)}`, tc)
  }
  to pointerEq(a :Expr, b :Expr) {
    def tc := [].asSet().diverge()
    return makeSV(EXPR, `(${a.out(tc)} === ${b.out(tc)})`, tc)
  }
  to ternary(a :Expr, b :Expr, c :Expr) {
    def tc := [].asSet().diverge()
    return makeSV(EXPR, `(${a.out(tc)} ? ${b.out(tc)} : ${c.out(tc)})`, tc)
  }
  to or(a :Expr, b :Expr) {
    def tc := [].asSet().diverge()
    return makeSV(EXPR, `(${a.out(tc)} || ${b.out(tc)})`, tc)
  }
  to object(assocs :List[Tuple[Expr, Expr]]) {
    def tc := [].asSet().diverge()
    def [tw, sb] := <elib:oldeio.makeTextWriter>.makeBufferingPair()
    tw.println("({")
    tw.indent().println()
    tw.indent().print(",\n".rjoin(map.v(fn [k,v] { k.out(tc) + ": " + v.out(tc) }, assocs)))
    tw.lnPrint("})")
    
    return makeSV(EXPR, sb.snapshot(), tc)
  }
  to array(elems :List[Expr]) {
    def tc := [].asSet().diverge()
    def [tw, sb] := <elib:oldeio.makeTextWriter>.makeBufferingPair()
    if (elems.size() > 1) {
      tw.print("[")
      tw.indent().println()
      tw.indent().print(",\n".rjoin(map.v(fn v { v.out(tc) }, elems)))
      tw.lnPrint("]")
    } else {
      tw.print("[")
      tw.print(", ".rjoin(map.v(fn v { v.out(tc) }, elems)))
      tw.print("]")
    }
    
    return makeSV(EXPR, sb.snapshot(), tc)
  }
  to param(name :Expr) {
    # XXX should have syntax type tags and check that this is a var
    return makeSV(EXPR, name.outz(), [].asSet())
  }
}

def targetKit := jsKit


def compilePat

def escapeIdentifier(var ident) {
  # XXX E ought to have a regexp s/// operation
  var escapedIdent := ""
  while (ident.size().aboveZero()) {
    switch (ident) {
      match rx`(@okay[a-zA-Z0-9_]+)(@rest.*)` {
        ident := rest
        escapedIdent += okay
      }
      match rx`(@notOkay.)(@rest.*)` {
        ident := rest
        require(notOkay.size() <=> 1)
        escapedIdent += "$" + notOkay[0].asInteger().toString(16) + "$"
      }
    }
  }
  return escapedIdent
}

def convertVerb(verb, arity) {
  return `emsg_${escapeIdentifier(verb)}_$arity`
}
def convertNoun(noun) {
  return makeSV(EXPR, `e_slot_${escapeIdentifier(noun)}`, [])
}

def tempifyJsExpr(temp__Resolver, sv) {
  return if (sv.outz() =~ rx`[A-Za-z$$0-9]+`) { # XXX right identifier pattern?
    bind temp := sv
    targetKit.nativeVar("undefined")
  } else {
    def [bind temp, out] := targetKit.temp()
    out(sv)
  }
}

/** generate an E-call with already-compiled args */
def genCall(recip :SV, verb :String, args :List[SV]) {
  def prop := convertVerb(verb, args.size())
  
  def [argAssigners, argTemps] := map2(fn arg {
    [tempifyJsExpr(def temp, arg), temp]
  }, args)
  def assigners := [tempifyJsExpr(def recipTemp, recip)] + argAssigners
  
  return targetKit.eseq(assigners.with(
    targetKit.ternary(targetKit.prop(recipTemp, prop), # all functions are true as conditions
                      targetKit.call(recipTemp, prop, argTemps),
                      targetKit.callf(targetKit.nativeVar("e_NoJsMethod"), [
                                        recipTemp,
                                        targetKit.literal(verb),
                                        targetKit.array(argTemps)]))
  ))
}

# --- compile-time env ---

def emptySenv {
  to get(noun) {
    throw(`unbound in eojs: $noun`)
  }
}

def withSlot(next, defNoun :String) {
  def sbinding {
    to genGetSlot() { return convertNoun(defNoun) }
  }
  
  return def outerSenv {
    to __printOn(out) {
      out.print(defNoun, ":", next)
    }
    to get(noun :String) {
      return if (noun == defNoun) {
        sbinding
      } else {
        next.get(noun)
      }
    }
  }
}

# --- actual compiler ---

def compile(expr, out, &senv) {
  #traceln(`compiling $expr`)
  return expr.welcome(def visitor {
    to visitLiteralExpr(_, v) { return out(jsKit.literal(v)) }
    to visitNounExpr(expr, _) { return compile(makeCallExpr(null, (makeSlotExpr(null, expr, null)), "get", [], null), out, &senv) }
    to visitSlotExpr(_, n) { return out(senv[n.getName()].genGetSlot()) }
    to visitSeqExpr(_, subs) { return targetKit.seq(map.v(fn sub { compile(sub, __identityFunc, &senv) }, subs(0, subs.size() - 1)) + [compile(subs.last(), out, &senv)]) }
    to visitCallExpr(_, rec, verb, args) {
      def [rtemp, rout] := targetKit.temp()
      def recAssigner := compile(rec, rout, &senv)
      def [argTemps, argAssigners] := map2(fn arg {
        def [temp, tout] := targetKit.temp()
        [temp, compile(arg, tout, &senv)]
      }, args)
      return targetKit.seq(
          [recAssigner] \
        + argAssigners \
        + [out(genCall(rtemp, verb, argTemps))]
      )
      #return genCall(compile(rec, out), verb, map.kv(fn _,v { compile(v, out)}, args))
    }
    to visitDefineExpr(_, pat, ej, expr) {
      # XXX compile ej
      # XXX this puts lhs in the scope of the rhs
      def [temp, tout] := targetKit.temp()
      return targetKit.seq([compile(expr, tout, &senv),
                          compilePat(pat, temp, null, &senv),
                          out(temp)])
    }
    to visitAssignExpr(_, lv, rv) {
      def [rtemp, rout] := targetKit.temp()
      def [ltemp, lout] := targetKit.temp()
      
      return targetKit.seq([
        compile(rv, rout, &senv),
        compile(makeSlotExpr(null, lv, null), lout, &senv),
        genCall(ltemp, "put", [rtemp]),
        out(rtemp)
      ])
    }
    to visitEscapeExpr(_, pat, body, cp, cb) {
      def exceptionName := targetKit.fresh()
      def ejectorMake := targetKit.new(targetKit.nativeVar("e_Ejector"), []) # XXX preserve name 
      def [ejectorObj, eout] := targetKit.temp()
      var senv_escape := senv
      var senv_catch := senv
      return \
      targetKit.seq([
        eout(ejectorMake),
        targetKit.tryCatch(
          targetKit.seq([
            compilePat(pat, ejectorObj, null, &senv_escape),
            compile(body, out, &senv_escape),
          ]),
          exceptionName,
          targetKit."if"(
            targetKit.pointerEq(targetKit.prop(exceptionName, "e_Ejector"), ejectorObj),
            if (cp == null) {
              out(targetKit.prop(exceptionName, "e_RetVal"))
            } else {
              targetKit.seq([ compilePat(cp, targetKit.prop(exceptionName, "e_RetVal"), null, &senv_catch), compile(cb, out, &senv_catch) ])
            },
            targetKit.callf(targetKit.nativeVar("throw"), [exceptionName]))) # XXX throw isn't a function, this shouldn't work
      ])
    }
    to visitFinallyExpr(_, body, cleanup) {
      return compile(body, out, &senv) # XXX fix
    }
    to visitCatchExpr(_, body, catchPatt, catchBody) {
      return compile(body, out, &senv) # XXX fix
    }
    to visitHideExpr(_, body) {
      var senv2 := senv
      return targetKit.scope(compile(body, out, &senv2))
    }
    to visitIfExpr(_, cond, then, els) {
      # XXX coerce to boolean
      def [ctemp, cout] := targetKit.temp()
      var senv_then := senv
      var senv_els := senv
      return targetKit.seq([
        compile(cond, cout, &senv_then),
        targetKit."if"(ctemp,
          compile(then, out, &senv_then),
          compile(els, out, &senv_els)),
      ])
    }
    to visitObjectExpr(_, docComment, name, auditors, script) {
      # XXX auditors
      # XXX doc comment
      # XXX name properly
      # XXX plumbing
      def nameString := switch (name) {
        match _ :IgnorePattern { "_" }
        match p :FinalPattern { p.getNoun().getName() }
        match p :VarPattern { p.getNoun().getName() }
        match p :SlotPattern { "&" + p.getNoun().getName() }
        match _ { "???" }
      }
      
      def [objtemp, objOut] := targetKit.temp()
      
      # update senv before compiling the body so that the object sees its own name
      def patCode := compilePat(name, objtemp, null, &senv)
      
      var jsmethods := [
        [targetKit.literal("toString"),
          targetKit.func([], targetKit."return"(targetKit.literal(`<E object $nameString>`)))]
      ]
      jsmethods := accum jsmethods for m in script.getOptMethods() {
        _.with([targetKit.literal(convertVerb(m.getVerb(), m.getPatterns().size())),
                {
                  var senv_method := senv
                  # XXX result guard
                  def atemps := accum [] for _ in m.getPatterns() { _.with(targetKit.fresh()) }
                  def patternCode := map.kv(fn i,p { compilePat(p, atemps[i], null, &senv_method) }, m.getPatterns())
                  def cv := compile(m.getBody(), jsKit."return", &senv_method)
                  if (cv !~ sv :SV) { throw(`cv is $cv from ${m.getBody()}`) }
                  targetKit.func(atemps,
                    targetKit.seq(patternCode.with(cv)))
              }])
      }
      
      if ((def matchers := script.getMatchers()).size().aboveZero()) {
        var senv_matcher := senv
        def [m] + _ := matchers # XXX support >1
        def verbt := targetKit.fresh()
        def argt := targetKit.fresh()
        jsmethods with= [targetKit.literal("emsg"),
          targetKit.func([verbt, argt],
            targetKit.seq([
              compilePat(m.getPattern(), targetKit.array([verbt, argt]), null, &senv_matcher), # XXX handle match failure
              compile(m.getBody(), jsKit."return", &senv_matcher)]))]
      }
      
      return targetKit.seq([
        objOut(jsKit.object(jsmethods)),
        patCode,
        out(objtemp)
      ])
    }
    to visitMetaContextExpr(n) {
      return out(targetKit.callf(targetKit.nativeVar("alert"), [targetKit.literal(`$n not implemented`)]))
    }
    to visitMetaStateExpr(n) {
      return out(targetKit.callf(targetKit.nativeVar("alert"), [targetKit.literal(`$n not implemented`)]))
    }
  })
}

def compileBindingPattern(ne, guardE, slotCompile, slotCompileGuarded, &senv) {
  def slotvar := convertNoun(ne.getName()).outz()
  senv := withSlot(senv, ne.getName())
  if (guardE == null) {
    return targetKit.assign(slotvar, slotCompile()).withTemp(slotvar)
  } else {
    def [gtemp, gout] := targetKit.temp()
    return targetKit.seq([
      compile(guardE, gout, &senv),
      targetKit.assign(slotvar, slotCompileGuarded(gtemp)).withTemp(slotvar)
    ])
  }
}

def cMakeFinalSlot := targetKit.nativeVar(`e_makeFinalSlot`)
def cMakeVarSlot := targetKit.nativeVar(`e_makeVarSlot`)
def cMakeGuardedSlot := targetKit.nativeVar(`e_makeGuardedSlot`)

bind compilePat(pat, specimen, optEjSpec, &senv) {
  return pat.welcome(def visitor {
    to visitIgnorePattern(_, guardE) {
      if (guardE == null) {
        return targetKit.nativeVar(`undefined`)
      } else {
        def [gtemp, gout] := targetKit.temp()
        return targetKit.seq([
          compile(guardE, gout, &senv),
          genCall(gtemp, "coerce", [specimen, targetKit.nativeVar("e_throw")])
        ])
      }
    }
    to visitFinalPattern(_, ne, guardE) {
      return compileBindingPattern(ne, guardE, 
        fn { targetKit.callf(cMakeFinalSlot, [specimen]) },
        fn guard { targetKit.callf(cMakeFinalSlot, [genCall(guard, "coerce", [specimen, targetKit.nativeVar("e_throw")])]) }, &senv)
    }
    to visitVarPattern(_, ne, guardE) {
      return compileBindingPattern(ne, guardE,
        fn { targetKit.callf(cMakeVarSlot, [specimen]) },
        fn guard { targetKit.callf(cMakeGuardedSlot, [specimen, guard]) }, &senv)
    }
    to visitSlotPattern(_, ne, guardE) {
      return compileBindingPattern(ne, guardE, 
        fn { specimen },
        fn guard { genCall(guard, "coerce", [specimen, guard]) }, &senv)
    }
    to visitListPattern(_, subs) {
      # XXX coerce, length
      return targetKit.seq(accum [] for i => sub in subs { _.with(
        compilePat(sub, targetKit.subscript(specimen, targetKit.literal(i)), optEjSpec, &senv)
      )})
    }
    to visitViaPattern(_, func, subpatt) {
      def [fTemp, fOut] := targetKit.temp()
      def [subSpecimenTemp, subSpecOut] := targetKit.temp()
      return targetKit.seq([
        compile(func, fOut, &senv),
        subSpecOut(genCall(fTemp, "run", [specimen, targetKit.nativeVar("e_throw")])), # XXX use optEjSpec
        compilePat(subpatt, subSpecimenTemp, optEjSpec, &senv)
      ])
    }
  })
}

def outerCompile {
  to getEmptyStaticEnv() {
    return emptySenv
  }
  to getBindEnvMaker() {
    return withSlot
  }
  to run(expr, &senv) {
    return unsv(compile(expr, __identityFunc, &senv))
  }
  to assignResult(name, expr, &senv) {
    return unsv(compile(expr, fn e { jsKit.assign(name, e) }, &senv))
  }
  to returning(expr, &senv) {
    return unsv(compile(expr, jsKit."return", &senv))
  }
  to importEnv(assumedSenv, staticScope) {
    var senv := assumedSenv
    for name => _ in staticScope.namesUsed() {
      senv := withSlot(senv, name)
    }
    return senv
  }
  to import(staticScope, envVar) {
    return unsv(jsKit.seq(accum [] for name => _ in staticScope.namesUsed() {
      _.with(
        def slotvar := convertNoun(name).outz()
        jsKit.assign(slotvar, genCall(jsKit.nativeVar(envVar), "getSlot", [jsKit.literal(name)])).withTemp(slotvar))
    }))
  }
  /** generate JS code which generates a runtime env from local bindings in 'senv' affected by 'staticScope' starting from 'initialEnvVar' */
  to "export"(initialEnvVar :String, finalEnvVar :String, staticScope, senv) {
    var expr := jsKit.nativeVar(initialEnvVar)
    for name => _ in staticScope.outNames() {
      expr := genCall(expr, "withSlot", [jsKit.literal(name), senv[name].genGetSlot()])
    }
    return unsv(jsKit.assign(finalEnvVar, expr))
  }
}
