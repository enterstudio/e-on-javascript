# Copyright 2008 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def NullPointerException := <type:java.lang.NullPointerException>
def compiler := <import:org.erights.eojs.compiler>
def parse := <elang:syntax.makeEParser>.run

def mangleToIdentifier(text) { # XXX more thorough mangling, consistent with runtime and compiler
  return text.replaceAll("_", "_u").replaceAll(".", "_$")
}

def compileLibraries(dotNames, sources, destination, report, overwrite) {
  for dotName in dotNames {
    def slashName := dotName.replaceAll(".", "/") # XXX what if there's a slash?
    def sourceFile := for dir in sources {
      # kludgy -- files might not .exists(), whereas <resource> fails eagerly
      def r := try { 
        dir[slashName + ".emaker"] 
      } catch p ? (p.leaf() =~ _ :NullPointerException) {
        continue
      }
      if (!(r.__respondsTo("exists", 0)) || r.exists()) { break r }
    }
    def destFile := destination[slashName + ".js"]
    report.print(`$dotName, `)
    if (sourceFile == null) {
      report.println(`didn't find input file`)
    } else {
      if (destFile.exists() && !overwrite) { # XXX compare dates
        report.println(`exists`)
      
        continue
      }
      report.println(`compiling$\n    $sourceFile -> $destFile`)
      try {
        destination[{def rx`(@dirname.*/)[^/]+` := slashName; dirname}].mkdirs(null)
        destFile.setText(`
            e_maker_${mangleToIdentifier(dotName)} = function () {
                ${compiler.returning(parse(sourceFile.getTwine()))}
            };
        `)
      } catch p {
        report.println(`Failed to compile: $p`)
      }
    }
  }
}