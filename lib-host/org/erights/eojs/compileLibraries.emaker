# Copyright 2008 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def NullPointerException := <type:java.lang.NullPointerException>
def compiler := <import:org.erights.eojs.compiler>
def staticSafeEnv := <import:org.erights.eojs.makeStaticSafeEnv>(compiler)
def parse := <elang:syntax.makeEParser>.run

def htmlesc(t :String) {
  return t.replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;").replaceAll("\"", "&quot;")
}

def mangleToIdentifier(text) { # XXX more thorough mangling, consistent with runtime and compiler
  return text.replaceAll("_", "_u").replaceAll(".", "_$")
}

def compileLibraries(dotNames, sources, destination, progress, htmlReport, title, overwrite) {
  
  htmlReport.print(`
<html><head>
  <title>E-on-JavaScript library compilation report - ${htmlesc(title)}</title>
  <style type="text/css">
    pre {
      font-size: 80%;
      background: #FEE;
    }
    td.row { border-top: 1px solid gray; }
  </style>
</head><body>
<table>
<tr><th>FQN</th><th>Status</th><th>Source file</th></tr>
<tr><th colspan=3>Error log</th></tr>
`)

  var failures := 0
  
  for dotName in dotNames {
    def slashName := dotName.replaceAll(".", "/") # XXX what if there's a slash?
    def sourceFile := for dir in sources {
      # kludgy -- files might not .exists(), whereas <resource> fails eagerly
      def r := try { 
        dir[slashName + ".emaker"] 
      } catch p ? (p.leaf() =~ _ :NullPointerException) {
        continue
      }
      if (!(r.__respondsTo("exists", 0)) || r.exists()) { break r }
    }
    def destFile := destination[slashName + ".js"]
    progress.print(`$dotName, `)
    htmlReport.print(`<tr class="row"><td>${htmlesc(dotName)}</td>`)
    if (sourceFile == null) {
      progress.println(`didn't find input file`)
      htmlReport.println(`<td>didn't find input file</td><td></td>`)
      failures += 1
    } else {
      def sourceFileHtml := `<td><a href="file://${htmlesc(E.toString(sourceFile.getPath()))}">${htmlesc(E.toString(sourceFile))}</a></td>`
      if (destFile.exists() && !overwrite) {
        if (!sourceFile.__respondsTo("lastModified", 0) || destFile.lastModified() > sourceFile.lastModified()) {
          progress.println(`source older`)
          htmlReport.println(`<td>source older</td>$sourceFileHtml`)
          continue
        }
      }
      progress.println(`compiling from:$\n    $sourceFile`)
      try {
        destination[{def rx`(@dirname.*/)[^/]+` := slashName; dirname}].mkdirs(null)
        destFile.setText(`
            e_maker_${mangleToIdentifier(dotName)} = function () {
                ${compiler.returning(parse(sourceFile.getTwine()), {var e := staticSafeEnv; &e})}
            };
        `)
        htmlReport.println(`<td>compiled</td>$sourceFileHtml`)
      } catch p {
        failures += 1
        progress.println(`Failed to compile: $p`)
        htmlReport.println(`<td>compilation failed</td>$sourceFileHtml</tr>`)
        htmlReport.println(`<tr><td colspan="3"><pre># problem: ${htmlesc(E.toString(p))}$\n${htmlesc(E.toString(p.eStack()))}</td>`)
      }
    }
    htmlReport.println("</tr>")
  }
  htmlReport.println("</body></html>")
  
  return failures
}