# Copyright 2008-2009 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")
pragma.enable("accumulator")

def compiler := <import:org.erights.eojs.compiler>
def commonEmakerList := <import:org.erights.eojs.commonEmakerList>
#def staticSafeEnv := <import:org.erights.eojs.makeStaticSafeEnv>(compiler)
def staticPrivEnv := <import:org.erights.eojs.makeStaticPrivilegedEnv>(compiler)
def makeELexer := <elang:syntax.makeELexer>
def makeEParser := <elang:syntax.makeEParser>
def makeUpdocParser := <import:org.erights.e.tools.updoc.makeUpdocParserAuthor>(null) # XXX support the user supplying a hash-cache for the animation case
def makeTextWriter := <elib:oldeio.makeTextWriter>

def Writer := any
def Term := <import:org.quasiliteral.term.makeTerm>.asType()

def TEXT_NODE := <import:org.w3c.dom.makeNode>.getTEXT_NODE()
def htmlns := "http://www.w3.org/1999/xhtml"
def identityTransformer := <import:javax.xml.transform.makeTransformerFactory>.newInstance().newTransformer() # used by htmlToDom
  
def nullWriter {match _ {}}
def nullResolver {match _ {}}

def htmlesc(t :String) {
  return t.replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;").replaceAll("\"", "&quot;")
}
def jsQuote(t :String) {
  # XXX should use either jsKit (not accessible outside of the compiler currently) or Term-tree (currently has inaccuracy bugs wrt newlines) to generate real JS rather than relying on similarity of E string syntax
  return E.toQuote(t).replaceAll("\n", "\\n")
}

def htmlToDom(html :String) {
  # TagSoup/DOM glue from http://www.jezuk.co.uk/cgi-bin/view/jez?id=2643
  def makeTagSoupParser := <import:org.ccil.cowan.tagsoup.makeParser>
  def reader := makeTagSoupParser()
  reader.setFeature(makeTagSoupParser.getNamespacesFeature(), true)
  reader.setFeature(makeTagSoupParser.getNamespacePrefixesFeature(), false)

  def result := <import:javax.xml.transform.dom.makeDOMResult>()

  identityTransformer.transform(<import:javax.xml.transform.sax.makeSAXSource>(reader, <import:org.xml.sax.makeInputSource>(<import:java.io.makeStringReader>(html))), result);

  return result.getNode()
}

def writeDocument(document, result) {
  identityTransformer.transform(<import:javax.xml.transform.dom.makeDOMSource>(document), result)
  #return document.saveXML(document.getDocumentElement())
}

/** This is strict so it does what we want in for-loops etc. */
def stripNewlineStrict(specimen :String, ejector) {
  require(specimen.endsWith("\n")) # , fn { ejector("Unexpected lack of newline") }
  return specimen.run(0, specimen.size() - 1)
}

def updocTermToSteps(updoc) {
  def term`script(inVats(@vatNames*),
                  [@sequences*])` := updoc
  
  return switch (sequences) {
    # one vat
    match [term`inVat(@vatName, [@steps*])`] {
      steps
    }
    
    # no vats (empty updoc)
    match [] {
      []
    }
    
    # multiple vats
    match [_, _] + _ {
      # XXX ejector
      throw("Cannot convert multiple-vat Updoc.")
    }
  }
}

def stepToJS(prefix, i, step, envVar, eParser) {
  def term`test(@{via (stripNewlineStrict) source},
                {@answers*})` := step

  eParser.setSource(source)
  def body := escape syntaxFail {
    def ast := try { eParser.parse() } catch syntaxError { syntaxFail(syntaxError) }

    var senv := compiler.importEnv(compiler.getBindEnvMaker()(staticPrivEnv, "interp"), ast.staticScope())
    def js := compiler.assignResult("res", ast, &senv)
    if (js.indexOf1("</") != -1) {
      throw("Shouldn't happen: found </ in generated JS")
    }

    `
      function ${prefix}_runOuter_$i(updoc_updocDriver) {
        return updoc_updocDriver.runStep(${jsQuote(prefix)}, function () {
          var res;
          ${compiler.import(ast.staticScope(), envVar)}
          $js;
          ${compiler."export"(envVar, envVar, ast.staticScope(), senv)};
          return res;
        }, $i, ${prefix}_expected_$i)
      }
    `
  } catch syntaxError {
    `
      function ${prefix}_runOuter_$i(updoc_updocDriver) {
        return updoc_updocDriver.runSyntaxError(${jsQuote(prefix)}, ${jsQuote(E.toString(syntaxError))}, $i, ${prefix}_expected_$i)
      }
    `
  }
  
  return `
    var ${prefix}_expected_$i = [${", ".rjoin(
      accum [] for term`@k:@{via (stripNewlineStrict) v}` in answers {
        _.with(`[${jsQuote(k.getTag().getTagName())},
                      ${jsQuote(v)}]`)
      }
    )}]
    $body
  `
}

def collectText(node, tw) {
  # XXX treat block elements and BRs as line breaks. But we probably will throw out this code anyway - see in rewriteDom about not using the updoc parser
  def childrenNL := node.getChildNodes()
  def childrenFixed := accum [] for j in 0..!(childrenNL.getLength()) { _.with(childrenNL.item(j)) } # since we append
  for ch in childrenFixed {
    if (ch.getNodeType() == TEXT_NODE) {
      tw.print(ch.getData().replaceAll("\u00A0", " ")) # kill nbsp because the parser doesn't accept it -- XXX the parser should
    } else {
      collectText(ch, tw)
    }
  }
}

def rewriteDom(dir, 
               [=> progress :Writer := nullWriter,
                => whetherFoundResolver := nullResolver,
                => prefix
               ] | _, document) {

  # Parser to use for E source in updoc (init copied from EoJ elang.cmd.cmdMakerMaker)
  def eParser := {
    def lexer := makeELexer(null,           # optLineFeeder
                            false,          # partialFlag
                            false)          # noTabsFlag
    makeEParser.make(null,    # optProps
                     lexer,
                     progress, # warning
                     false,    # debugFlag
                     false)    # onlyOneExprFlag
  }

  def head := document.getElementsByTagName("head").item(0)
  def body := document.getElementsByTagName("body").item(0)
  {
    head.appendChild(def e := document.createElementNS(htmlns, "script"))
    e.setAttribute("src", `$dir/e.js`)
  }
  for emaker in commonEmakerList {
    head.appendChild(def e := document.createElementNS(htmlns, "script"))
    e.setAttribute("src", `$dir/import/${emaker.replaceAll(".", "/")}.js`)
  }
  {
    head.appendChild(def e := document.createElementNS(htmlns, "script"))
    e.setAttribute("src", `$dir/updoc-driver.js`)
  }
  def envVar := `${prefix}_eenv`
  def updocVar := `${prefix}_driver`
  {
    head.appendChild(def e := document.createElementNS(htmlns, "script"))
    e.appendChild(document.createTextNode(`
      var $envVar;
      var $updocVar = new updoc_Driver(
        ${jsQuote(prefix)},
        function () { $envVar = $updocVar.augmentEnv(e_privilegedEnv); });
    `))
  }
  {
    head.appendChild(def e := document.createElementNS(htmlns, "link"))
    e.setAttribute("rel", `stylesheet`)
    e.setAttribute("href", `$dir/updoc.css`)
  }
  
  # Visible Updoc control panel
  def updocControlPanel := document.createElementNS(htmlns, "div")
  body.insertBefore(updocControlPanel, body.getFirstChild()) # XXX insert after the h1 if there is one
  updocControlPanel.setAttribute("class", "updoc-header-control-panel")
  
  # Control panel progress bar
  def updocProgressBar := document.createElementNS(htmlns, "p")
  body.insertBefore(updocProgressBar, updocControlPanel)
  updocProgressBar.setAttribute("class", "updoc-progress-bar")
  
  { # Control panel restart button
    updocControlPanel.appendChild(def e := document.createElementNS(htmlns, "button"))
    e.appendChild(document.createTextNode(`Rerun`))
    e.setAttribute("onclick", `
      $updocVar.run()
    `)
  }
  
  var stepCounter := -1
  
  def pres := document.getElementsByTagName("pre")
  def presFixed := accum [] for j in 0..!(pres.getLength()) { _.with(pres.item(j)) } # since we add other pres
  for element in presFixed {
    # XXX this strategy fails if there is more than one <pre> per step (eg as in our own output, not that this is supposed to be idempotent)
    progress.print(".")
    progress.flush()
    
    def [tw, sb] := <elib:oldeio.makeTextWriter>.makeBufferingPair()
    collectText(element, tw)
    def updocText := sb.snapshot()

    { # Generate step markup
      def updoc := makeUpdocParser.parsePlain(updocText)
      def steps := updocTermToSteps(updoc)
      
      # XXX This procedure fails to preserve non-updoc text inside of <pre>. We need to instead write our own updoc parser which preserves text and markup -- probably should traverse the dom tree while running a state machine, and preserving backpointers to e.g. "enclosing block element"
      
      # The original is a pre, we need a div so we can write block structure inside it
      def newElement := document.createElementNS(htmlns, "div")
      element.getParentNode().replaceChild(newElement, element)
      
      # This is the old strategy
      #while (element.getChildNodes().getLength() > 0) {
      #  element.removeChild(element.getFirstChild())
      #}
      
      
      for step in steps {
        def i := stepCounter += 1
        
        #progress.print(`incrementing counter to $i for $step`)

        def term`test(@{via (stripNewlineStrict) source},
                      {@answers*})` := step

        newElement.appendChild(def stepDiv := document.createElementNS(htmlns, "div"))
        stepDiv.setAttribute("class", "updoc-step updoc-pending")
        stepDiv.setAttribute("id", `$prefix-step-$i`)

        stepDiv.appendChild(def exprPre := document.createElementNS(htmlns, "pre"))
        exprPre.setAttribute("class", "updoc-expr")
        exprPre.appendChild(document.createTextNode(`? ${source.replaceAll("\n", "\n> ")}`))
        
        stepDiv.appendChild(def stepScript := document.createElementNS(htmlns, "script"))
        stepScript.appendChild(document.createTextNode(`
          ${stepToJS(prefix, i, step, envVar, eParser)}
        `))
        for answer in answers {
          def term`@{label :String}: @{via (stripNewlineStrict) text}` := answer

          stepDiv.appendChild(def expectPre := document.createElementNS(htmlns, "pre"))
          expectPre.setAttribute("class", "updoc-output-exp")
          expectPre.setAttribute("id", `$prefix-expect-$i`)
          expectPre.appendChild(document.createTextNode(`# $label: $text`))
        }
        stepDiv.appendChild(def gotPre := document.createElementNS(htmlns, "pre"))
        gotPre.setAttribute("class", "updoc-output-got")
        gotPre.setAttribute("id", `$prefix-output-$i`)
        
        # progress bar element
        updocProgressBar.appendChild(def pbElem := document.createElementNS(htmlns, "a"))
        pbElem.setAttribute("class", "updoc-progress updoc-pending")
        pbElem.setAttribute("id", `$prefix-progress-$i`)
        pbElem.setAttribute("href", `#$prefix-step-$i`)
        pbElem.appendChild(document.createTextNode(`$i`))
      }
    }
  }

  {
    body.appendChild(def e := document.createElementNS(htmlns, "script"))
    
    e.appendChild(document.createTextNode(`
    $updocVar.run()`))
  }
  
  {
    def kludge := document.createElementNS(htmlns, "div")
    kludge.setAttribute("id", "updoc-content-container-for-resize-kludge")
    while (body.getChildNodes().getLength() > 0) {
      def move := body.getFirstChild()
      body.removeChild(move)
      kludge.appendChild(move)
    }
    body.appendChild(kludge)
  }
  
  whetherFoundResolver.resolve(stepCounter > -1)
}

def compileUpdoc {
  /** Convert plain-text Updoc into a complete HTML document. "dir" is the relative or absolute URL (with no trailing slash) of the directory in which the EoJS runtime support files are located. whetherFoundResolver, if provided, is resolved to a boolean indicating whether there were any updoc steps present. "result" is a javax.xml.transform.Result to write to. */
  to toHTMLDocument(
    dir :String,
    [=> title :String := "E-on-JavaScript converted Updoc",
     => documentHeadingLevel :(1..6) := 1,
     => includeScriptURLs := [],
     => progress :Writer := nullWriter
    ] | moreOptions,
    updocText :Twine,
    result :<type:javax.xml.transform.Result>
  ) {
    def prefix := "updsingleton"
    # The way this works is that we create a DOM document with the updoc text but no scripting, then apply rewriteDom to it.
    
    def dbf := <import:javax.xml.parsers.makeDocumentBuilderFactory>.newInstance()
    dbf.setNamespaceAware(true) # XXX needed?
    def document := dbf.newDocumentBuilder().newDocument()
    
    document.appendChild(def html := document.createElementNS(htmlns, "html"))

    html.appendChild(def head := document.createElementNS(htmlns, "head"))

    head.appendChild(def titleE := document.createElementNS(htmlns, "title"))
    titleE.appendChild(document.createTextNode(title))

    for script in includeScriptURLs {
      head.appendChild(def e := document.createElementNS(htmlns, "script"))
      e.setAttribute("src", script)
    }

    html.appendChild(def body := document.createElementNS(htmlns, "body"))

    body.appendChild(def heading := document.createElementNS(htmlns, `h$documentHeadingLevel`))
    heading.appendChild(document.createTextNode(title))
    
    body.appendChild(def pre := document.createElementNS(htmlns, "pre"))
    pre.appendChild(document.createTextNode(updocText))

    rewriteDom(dir, moreOptions | ["prefix" => "updsingleton", => progress], document)
    
    return writeDocument(document, result)
  }
  /** As toHTMLDocument/4, but takes HTML source and produces an XHTML document optionally including all the markup of the original, with added Updoc support. */
  to animateHTMLDocument(
    dir :String,
    options :Map,
    htmlSource :Twine,
    result :<type:javax.xml.transform.Result>
  ) {
    def document := htmlToDom(htmlSource)
    #document.getElementsByTagName("html").item(0).setAttribute("xmlns", htmlns)
    rewriteDom(dir, options | ["prefix" => "updsingleton"], document)
    
    return writeDocument(document, result)
  }
  
  /** Create a HTML document which will embed and execute every listed converted-updoc file. */
  to makeUpdocIndexDocument(dir :String, files :List[Tuple[String, any]]) {
    # XXX this page should perhaps have tabs for each subdocument?
    return `$\
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>
  <title>E Specification Tests</title>
  <link rel="stylesheet" href="../serve/updoc.css">
  <script src="$dir/updoc-index.js"></script>
</head><body onload="updoc_setupIndexPage();">

<h2>Table of contents</h2>

<ol>
${accum "" for i => [name, _] in files {
  # XXX URI-encoding
  _ + `  <li><a href="#updoc-frame-$i">${htmlesc(name)}</a> (<span id="updoc-index-status-$i">...</span>) </li>$\n`
}}
</ol>

<div class="updoc-pane-group">
${accum "" for i => [name, file] in files {
  # XXX URI-encoding
  _ + `  <p><iframe id="updoc-frame-$i" class="updoc-pane" src="${htmlesc(file.getPath())}"><a href="${htmlesc(file.getPath())}">${htmlesc(name)}</a><br></iframe></p>$\n`
}}</div>
</body>`
    
  }
}