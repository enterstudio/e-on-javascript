# Copyright 2005-2009 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

# This is semi-new code; it is based on E-on-CL's makeFlexListShell. It would probably be a good idea to backport this. -- kpreid 2009-01-03

pragma.syntax("0.9")

def listSugar := <import:org.erights.e.elib.tables.listSugar>

def listRangeChecks := {
/** Check that start..!endd is a subrange of 0..!size. */
def listRangeChecks(start, endd, size, name) {
  require(0 <= start,    fn{`$name start < 0: $start`})
  require(start <= endd, fn{`$name range has negative length: $start..!$endd`})
  require(endd <= size,  fn{`$name bound > $size: $endd`})
}}

def childResponsibility(self, mverb) {
  throw(E.toQuote(self) + " failed to implement " + mverb)
}

def flexListSugar extends listSugar implements DeepFrozen, ExitViaHere {
  to instance_put(self, index :int, value) { childResponsibility(self, "put/2") }
  
  to instance_setSize(self, new :int) { childResponsibility(self, "setSize/1") } # XXX implement in terms of replace?
  
  to instance_ensureSize(self, minimum :int) {
    if (self.size() < minimum) {
      self.setSize(minimum)
    }
  }
      
  to instance_push(self, new) :void {
    def i := self.size()
    self.replace(i, i, [new], 0, 1)
  }
  to instance_pop(self) {
    def lastIndex := self.size() - 1
    def result := self[lastIndex]
    self.setSize(lastIndex)
    return result
  }
      
  to instance_append(self, newItems) :void {
    # XXX should coerce newItems to EList?
    # XXX better variable names
    def itemsSize :int := newItems.size()
    def last := self.size()
    self.setSize(last + itemsSize)
    for j in 0..!itemsSize {
      self[last + j] := newItems[j]
    }
  }
  
  # Replace aliases
  to instance_setRun(self, start, source) {
    self.replace(start, self.size(), source, 0, source.size())
  }
  to instance_setRun(self, start, ::"end", source) {
    self.replace(start, ::"end", source, 0, source.size())
  }
  to instance_removeRun(self, start, ::"end") {
    def result := self.run(start, ::"end")
    self.replace(start, ::"end", [], 0, 0)
    return result
  }
  method instance_removeRun(self, start) { self.removeRun(start, self.size()) }
  to instance_insert(self, afterIndex, value) {
    self.replace(afterIndex, afterIndex, [value], 0, 1)
  }
}