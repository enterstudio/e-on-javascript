# Copyright 2009 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

# This is new code to E-on-JS.

def jsTools := <import:org.erights.eojs.jsTools>

def TextWriter0 {
  to coerce(specimen, ejector) {
    return specimen # XXX big fat security hole for some applications. Need to implement TextWriter guard.
  }
}

/** This is a workaround for not having real ConstMaps and TraversalKeys. */
def makeObjectMapKludge(assocs) {
  return def objectMapKludge {
    to fetch(key, fail) {
      for a in assocs {
        if (__equalizer.sameYet(a[0], key)) {
          return a[1]
        }
      }
      return fail()
    }
    to with(key, value) {
      return makeObjectMapKludge(assocs.with([key, value]))
    }
  }
}

def _makeTextWriter(strings, exitMap) {
  def textWriter {
    to write(text :String) {
      strings.push(text)
    }
    to quote(x) {
      escape notFound {
        def name := exitMap.fetch(x, notFound)
        textWriter.write(name)
        return
      }
      def state := Ref.state(x)
      if (state == "NEAR") {
        x.__printOn(textWriter)
      } else if (state == "BROKEN") {
        textWriter.write("<")
        if (x == jsTools.undefined()) {
          textWriter.write("JS undefined")
        } else if (x == jsTools.null()) {
          textWriter.write("JS null")
        } else {
          textWriter.write("ref broken by ")
          textWriter.print(Ref.optProblem(x))
        }
        textWriter.write(">")
      } else { # state == "EVENTUAL"
        if (Ref.isResolved(x)) {
          textWriter.write("<Far ref>")
        } else {
          textWriter.write("<Promise>")
        }
      }
    }
    to print(x) {
      escape fail {
        textWriter.write(String.coerce(x, fail)) # XXX don't accept coercion only sameness
        return
      }
      textWriter.quote(x)
    }
    to println(x) {
      textWriter.print(x)
      textWriter.write("\n")
    }
    to println() {
      textWriter.write("\n")
    }
    to printAll(xs) {
      for x in xs {
        textWriter.print(x)
      }
    }
    # XXX Should changing the exit map not be part of the writer interface at all, but rather be on the buffer/read end?
    to withExits(addedExits) {
      var m := exitMap
      for k => v in addedExits {
        m with= (k, v)
      }
      return _makeTextWriter(strings, m)
    }
  }
  return textWriter
}

def makeTextWriter {
  to asType() {
    return TextWriter0
  }
  to makeBufferingPair() {
    def strings := [].diverge()
    def buffer {
      to snapshot() {
        return "".rjoin(strings.snapshot())
      }
      to _clear() { # XXX invented for updoc's needs
        strings.setSize(0)
      }
    }
    
    # XXX Exit map should be initialized as a CycleBreaker instead once we have it.
    return [_makeTextWriter(strings, makeObjectMapKludge([])), buffer]
  }
}